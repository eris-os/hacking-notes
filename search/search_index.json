{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NOTAS DE HACKING DE ERIS","text":""},{"location":"active-directory/","title":"INTRODUCCION AL ACTIVE DIRECTORY","text":""},{"location":"burp-suite/","title":"BURP SUITE","text":""},{"location":"cookie-fuzzing/","title":"FUZZING DE COOKIES","text":""},{"location":"cpts/","title":"RUTA DE ESTUDIO PARA CPTS","text":""},{"location":"directory-fuzzing/","title":"FUZZING DE DIRECTORIOS","text":"<p>Wordlist adecuada para fuzzing de directorios</p> <p>La wordlist de seclists llamada directory-list-2.3-medium.txt es una de las mejores para empezar este tipo de fuzzing.</p> <p>El fuzzing de directorios es una t\u00e9cnica empleada para descubrir directorios ocultos o no referenciados en el servidor. Esto se logra mediante la generaci\u00f3n de solicitudes que var\u00edan el nombre y la estructura de los posibles directorios, se puede identificar rutas que puedan contener informaci\u00f3n sensible o configuraciones mal aseguradas.</p>"},{"location":"directory-fuzzing/#fuzzing-de-directorios-con-ffuf","title":"Fuzzing de directorios con Ffuf","text":"<p>Par\u00e1metro -ic</p> <p>El par\u00e1metro -ic nos permite evitar que los comentarios en una wordlist se tomen como parte de la lista.</p> <p>Para listar directorios debemos especificar dos par\u00e1metros:</p> <ul> <li><code>-u</code>: Especifica la URL del objetivo.</li> <li><code>-w</code>: Define la wordlist que se usar\u00e1 para el fuzzing.</li> </ul> <p>Placeholder / Palabra clave</p> <p>Por defecto la palabra que utiliza ffuf es FUZZ, a\u00fan si no le asignamos alg\u00fan placeholder a la wordlist, se puede usar esta palabra para realizar la operaci\u00f3n de fuzzing.</p> <p>Adem\u00e1s a la wordlist le podemos asignar un placeholder (palabra clave) para identificarla con el formato <code>wordlist_path:placeholder</code>.</p> <pre><code>ffuf -u http://TARGET_IP:PORT/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt:FUZZ -ic\n</code></pre> <p>Adem\u00e1s podemos utilizar los siguientes par\u00e1metros para realizar un fuzzing m\u00e1s eficiente:</p> <ul> <li><code>t</code>: N\u00famero de hilos (threads). Usado para aumentar o disminuir la velocidad del fuzzing (40 por defecto).</li> <li><code>timeout</code>: Tiempo m\u00e1ximo de espera por petici\u00f3n en segundos (10 por defecto).</li> <li><code>v</code>: Muestra informaci\u00f3n detallada (verbose).</li> <li><code>o</code>: Permite guardar la salida en un archivo.</li> <li><code>of</code>: El formato de archivo usado para guardarlo.</li> <li><code>recursion</code>: Activa el modo recursivo.</li> <li><code>recursion-depth</code>: Limita la profundidad de la recursi\u00f3n.</li> </ul> <p>El comando completo para un fuzzing de directorios suelen ser como el siguiente:</p> <pre><code>ffuf -u http://TARGET_IP:PORT/FUZZ -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt:FUZZ -ic -t 200 -timeout 5 --recursion --recursion-depth 2 -v -o nombre_archivo.html -of html\n</code></pre>"},{"location":"directory-fuzzing/#fuzzing-de-directorios-con-gobuster","title":"Fuzzing de directorios con Gobuster","text":""},{"location":"dns-enum/","title":"ENUMERACION DE DNS","text":""},{"location":"dnsadmins-windows/","title":"DNS ADMINS","text":""},{"location":"dom-xss/","title":"XSS DOM","text":""},{"location":"ejpt/","title":"RUTA DE ESTUDIO PARA EJPT","text":""},{"location":"enumeration/","title":"INTRODUCCION A LA ENUMERACION","text":""},{"location":"exif-osint/","title":"VER DATOS EXIF","text":""},{"location":"file-extension-fuzzing/","title":"FUZZING DE EXTENSIONES DE ARCHIVOS","text":"<p>Wordlist adecuada para fuzzing de extensiones de archivos</p> <p>La wordlist de seclists llamada web-extensions.txt es una de las mejores para empezar este tipo de fuzzing.</p> <p>El fuzzing de extensiones de archivos es una t\u00e9cnica empleada para descubrir qu\u00e9 tipos de archivos existen en un servidor, mediante la generaci\u00f3n de m\u00faltiples solicitudes que var\u00edan la extensi\u00f3n del archivo.</p> <p>Uno de los enfoques m\u00e1s comunes es realizar fuzzing sobre un nombre de archivo muy usado en aplicaciones web, como index. Por ejemplo, si el servidor utiliza el archivo index como entrada principal, es posible que existan variantes ocultas como index.php, index.html, etc.</p> <p>Nombres de archivos comunes</p> <p>Aunque index es el nombre m\u00e1s com\u00fan, es prudente ampliar el alcance del fuzzing utilizando otros nombres de archivos que tambi\u00e9n se emplean en aplicaciones web, por ejemplo: default, home, main, portal, dashboard o app.</p>"},{"location":"file-extension-fuzzing/#fuzzing-de-extensiones-de-archivos-con-ffuf","title":"Fuzzing de extensiones de archivos con Ffuf","text":"<p>Para realizar este tipo de fuzzing en ffuf con el nombre de archivo index podemos usar el siguiente comando:</p> <pre><code>ffuf -u http://TARGET_IP:PORT/indexFUZZ -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ\n</code></pre> <p>Esto realizara una busqueda de archivos como index.php, index.html, index.* utilizando las extensiones que tiene la wordlist.</p> <p>Podemos utilizar dos wordlist para realizar un fuzzing a diferentes nombres de archivos con diferentes extensiones:</p> <pre><code>ffuf -u http://TARGET_IP:PORT/NAMESEXT -w common_entry_names.txt:NAMES -w /usr/share/seclists/Discovery/web-extensions.txt:EXT\n</code></pre> <p>Placeholder de la wordlist</p> <p>Es importante no olvidar asignar un placeholder a las dos wordlists y posicionarlas en la URL de la manera adecuada.</p> <p>Cuando sepamos que tipos de archivos maneja el servidor, podemos usar el par\u00e1metro <code>-e</code> seguido de las extensiones de archivos para realizar una b\u00fasqueda espec\u00edfica de estos archivos.</p> <pre><code>ffuf -u http://TARGET_IP:PORT/FUZZ -w /usr/share/seclists/Discovery/directory-list-2.3-medium.txt -e .php,.pdf,.txt,.phpx\n</code></pre> <p>Esto tomar\u00e1 una palabra de la wordlist y realizar\u00e1 la b\u00fasqueda de la palabra con las extensiones de archivos. Por ejemplo:</p> <ul> <li>http://TARGET_IP:PORT/home</li> <li>http://TARGET_IP:PORT/home.php</li> <li>http://TARGET_IP:PORT/home.pdf</li> <li>http://TARGET_IP:PORT/home.txt</li> </ul>"},{"location":"file-extension-fuzzing/#fuzzing-de-extensiones-de-archivos-con-gobuster","title":"Fuzzing de extensiones de archivos con Gobuster","text":""},{"location":"ftp-enum/","title":"ENUMERACION DE FTP","text":""},{"location":"fuzzing/","title":"INTRODUCCION AL FUZZING","text":"<p>El fuzzing es una t\u00e9cnica que consiste en inyectar datos aleatorios, inesperados o malformados en una aplicaci\u00f3n para observar como reacciona. La idea es provocar errores, fallos de memoria, ca\u00eddas o comportamientos no deseados que puedan revelar vulnerabilidades.</p>"},{"location":"fuzzing/#diferencia-entre-fuzzing-y-fuerza-bruta","title":"Diferencia entre fuzzing y fuerza bruta","text":"<p>Sobre la terminolog\u00eda</p> <p>Es com\u00fan que se mezcle la terminolog\u00eda y se le llame fuzzing a t\u00e9cnicas de fuerza bruta. Ejemplo de ello es en la b\u00fasqueda de directorios que existen en una p\u00e1gina web, esto ser\u00eda en teor\u00eda fuerza bruta pero se le suele llamar de igual manera fuzzing de directorios. En la practica no es tan importante saber usar exactamente la terminolog\u00eda, si no m\u00e1s bien saber cuando y c\u00f3mo realizar las t\u00e9cnicas.</p> <p>Terminolog\u00eda en las notas</p> <p>En todas las notas usaremos indiscriminadamente los t\u00e9rminos fuzzing y fuerza bruta sin tomar demasiado en cuenta la terminolog\u00eda adecuada para la t\u00e9cnica.</p> <p>Aunque ambos m\u00e9todos implican enviar m\u00faltiples solicitudes o entradas a una aplicaci\u00f3n, existen diferencias fundamentales:</p> <ul> <li> <p>Objetivo:</p> <ul> <li>Fuzzing: Busca provocar fallos o comportamientos inesperados inyectando datos variados, a menudo con el prop\u00f3sito de descubrir vulnerabilidades en el manejo de entradas.</li> <li>Fuerza bruta: Se centra en probar todas las combinaciones posibles (por ejemplo, contrase\u00f1as o nombres de usuario) para adivinar credenciales o descubrir recursos.</li> </ul> </li> <li> <p>Enfoque y Metodolog\u00eda:</p> <ul> <li>Fuzzing: Es un enfoque exploratorio y se usa para encontrar errores en la l\u00f3gica o manejo de excepciones.</li> <li>Fuerza bruta: Es un enfoque sistem\u00e1tico y repetitivo, orientado a agotar combinaciones conocidas para acceder a un recurso espec\u00edfico.</li> </ul> </li> </ul>"},{"location":"fuzzing/#herramientas-comunes","title":"Herramientas comunes","text":"<p>Herramientas usadas en las notas</p> <p>Si bien existen diversas herramientas que permiten realizar fuzzing, en estas notas los ejemplos ser\u00e1n exclusivamente con ffuf y gobuster.</p> <p>Entre las herramientas que se suelen usar para el fuzzing existen: ffuf, gobuster, dirsearch, wfuzz, burp suite intruder, zap fuzzer, etc.</p>"},{"location":"hacking-web/","title":"INTRODUCCION AL HACKING WEB","text":""},{"location":"http/","title":"HYPERTEXT TRANSFER PROTOCOL (HTTP)","text":""},{"location":"imap-pop3-enum/","title":"ENUMERACION DE IMAP / POP3","text":""},{"location":"intercepting-web-requests/","title":"INTERCEPTAR PETICIONES WEB","text":"<p>Interceptar peticiones web consiste en capturar las solicitudes HTTP o HTTPS que salen del navegador web o una aplicaci\u00f3n hacia el servidor de destino. Esto nos permite modificar par\u00e1metros como:</p> <ul> <li>M\u00e9todos HTTP: GET, POST, PUT, DELETE, etc.</li> <li>Headers: Cookies, User-Agent, Content-Type, Referer, etc.</li> <li>Par\u00e1metros y carga \u00fatil: Datos enviados en formularios o en el body de la solicitud.</li> </ul>"},{"location":"intercepting-web-requests/#interceptar-peticiones-web-con-burp-suite","title":"Interceptar peticiones web con Burp Suite","text":"<p>Configuraci\u00f3n previa del navegador/aplicaci\u00f3n</p> <p>Es importante asegurarse de haber realizado la configuraci\u00f3n pertinente para el proxy en el navegador o aplicaci\u00f3n que se este utilizando.</p> <p>Para interceptar las peticiones web en Burp Suite navegamos a la pesta\u00f1a Proxy &gt; Intercept y presionamos el bot\u00f3n de Intercept on/off asegurandonos que este en on.</p> <p></p> <p>Ahora podemos ir al navegador/aplicaci\u00f3n que tenemos configurado para el proxy y empezar a interceptar peticiones.</p> <p></p> <p></p> <p>Modificamos lo que queramos de la petici\u00f3n y presionamos el bot\u00f3n Forward para que se env\u00ede la petici\u00f3n modificada.</p> <p></p>"},{"location":"intercepting-web-requests/#interceptar-peticiones-web-con-zap","title":"Interceptar peticiones web con ZAP","text":"<p>Configuraci\u00f3n previa del navegador/aplicaci\u00f3n</p> <p>Es importante asegurarse de haber realizado la configuraci\u00f3n pertinente para el proxy en el navegador o aplicaci\u00f3n que se este utilizando.</p>"},{"location":"intercepting-web-responses/","title":"INTERCEPTAR RESPUESTAS WEB","text":"<p>Interceptar las respuestas web significa capturar y analizar los datos que el servidor devuelve al cliente y tener la posibilidad de modificarlos. Esto nos permite modificar como luce la p\u00e1gina web, como habilitar o deshabilitar ciertos campos ocultos.</p>"},{"location":"intercepting-web-responses/#interceptar-respuestas-web-en-burp-suite","title":"Interceptar respuestas web en Burp Suite","text":"<p>En Burp Suite tenemos que habilitar la intercepci\u00f3n de respuestas, para ello iremos a la pesta\u00f1a de Proxy &gt; Intercept &gt; Proxy Settings.</p> <p></p> <p>Y en Tools &gt; Proxy buscaremos el apartado que diga Response interception rules habilitando la opci\u00f3n <code>Intercept responses based on the following rules</code>. En este apartado podemos tambi\u00e9n modificar las reglas de intercepci\u00f3n de respuestas web.</p> <p></p> <p>Ahora podemos interceptar las respuestas del servidor y modificarlas antes de que lleguen al cliente.</p> <p></p> <p></p> <p>Y como podemos ver, ahora cuando damos Forward aparece con el t\u00edtulo que hemos modificado en la respuesta.</p> <p></p>"},{"location":"intercepting-web-responses/#interceptar-respuestas-web-en-zap","title":"Interceptar respuestas web en ZAP","text":""},{"location":"ipmi-enum/","title":"ENUMERACION DE IPMI","text":""},{"location":"mssql-enum/","title":"ENUMERACION DE MSSQL","text":""},{"location":"mysql-enum/","title":"ENUMERACION DE MYSQL","text":""},{"location":"nfs-enum/","title":"ENUMERACION DE NFS","text":""},{"location":"oracle-tns-enum/","title":"ENUMERACION DE ORACLE TNS","text":""},{"location":"oscp/","title":"RUTA DE ESTUDIO PARA OSCP","text":""},{"location":"osint/","title":"INTRODUCCION AL OPEN-SOURCE INTELLIGENCE (OSINT)","text":""},{"location":"parameter-fuzzing/","title":"FUZZING DE PARAMETROS Y VALORES","text":"<p>Wordlist adecuada para fuzzing de par\u00e1metros</p> <p>La wordlist de seclists llamada burp-parameter-names.txt es una de las mejores para empezar este tipo de fuzzing.</p> <p>El fuzzing de par\u00e1metros es una t\u00e9cnica utilizada para descubrir vulnerabilidades en una aplicaci\u00f3n web probando m\u00faltiples valores en los par\u00e1metros de las peticiones HTTP.</p>"},{"location":"parameter-fuzzing/#fuzzing-en-peticiones-get-con-ffuf","title":"Fuzzing en peticiones GET con ffuf","text":"<p>Las peticiones GET en una aplicaci\u00f3n web se pasan a trav\u00e9s de la URL, indicadas de la forma <code>?param=key</code>. El fuzzing lo realizaremos al par\u00e1metro con cualquier valor, esto con el fin de identificar los par\u00e1metros v\u00e1lidos.</p> <pre><code>ffuf -u 'http://TARGET_IP:PORT/admin.php?FUZZ=key' -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ \n</code></pre>"},{"location":"parameter-fuzzing/#fuzzing-en-peticiones-post-con-ffuf","title":"Fuzzing en peticiones POST con ffuf","text":"<p>A diferencia de las peticiones GET que se realizan en la URL, las peticiones POST se pasan en el cuerpo (body) de la petici\u00f3n POST.</p> <p>Para realizar estas peticiones con ffuf debemos usar dos par\u00e1metros adicionales adem\u00e1s de los b\u00e1sicos:</p> <ul> <li> <p><code>-d</code>: Indica que los datos se enviaran en el cuerpo (body) de la solicitud HTTP.</p> </li> <li> <p><code>-X</code>: Especifica el m\u00e9todo HTTP a usar.</p> </li> </ul> <pre><code>ffuf -u 'http://TARGET_IP:PORT/admin.php' -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -X POST -d 'FUZZ=key'\n</code></pre> <p>En PHP, es importante que el header Content-Type sea de tipo application/x-www-form-urlencoded debido a que es el \u00fanico que acepta en peticiones POST. Para evitar errores, podemos agregarlo explicitamente al fuzzing.</p> <ul> <li><code>-H</code>: A\u00f1ade cabeceras HTTP personalizadas.</li> </ul> <pre><code>ffuf -u 'http://TARGET_IP:PORT/admin.php' -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded'\n</code></pre> <p>Al encontrar un par\u00e1metro v\u00e1lido, podemos verificar la respuesta usando la herramienta <code>curl</code>. Supongamos que el par\u00e1metro v\u00e1lido que encontramos es <code>\u00ecd</code>:</p> <pre><code>curl 'http://TARGET_IP:PORT/admin.php' -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'\n</code></pre>"},{"location":"parameter-fuzzing/#fuzzing-de-valores-de-parametros-con-ffuf","title":"Fuzzing de valores de par\u00e1metros con ffuf","text":"<p>Dependiendo del tipo de par\u00e1metro que obtuvimos, se utilizar\u00e1 diferentes wordlists para el fuzzing. En el caso anterior, obtuvimos un par\u00e1metro `\u00ecd``por lo que podemos crear una wordlist personalizada con los n\u00fameros de 1 al 10,000 para intentar obtener un id v\u00e1lido. </p> <pre><code>ffuf -u 'http://TARGET_IP:PORT/admin.php' -w custom_ids.txt:IDS -X POST -d 'id=IDS' -H 'Content-Type: application/x-www-form-urlencoded'\n</code></pre> <p>Y si obtenemos un id v\u00e1lido, podemos usar <code>curl</code> para obtener la respuesta. (Supongamos que el id v\u00e1lido es 73).</p> <pre><code>curl 'http://TARGET_IP:PORT/admin.php' -X POST -d 'id=73' -H 'Content-Type: application/x-www-form-urlencoded'\n</code></pre>"},{"location":"path-abuse-linux/","title":"ABUSO DEL PATH","text":""},{"location":"privilege-escalation/","title":"INTRODUCCION A LA ESCALADA DE PRIVILEGIOS","text":""},{"location":"redes/","title":"INTRODUCCION A LAS REDES","text":""},{"location":"reflected-xss/","title":"XSS REFLEJADO","text":""},{"location":"reporting/","title":"INTRODUCCION A LOS REPORTES Y DOCUMENTACION","text":""},{"location":"smb-enum/","title":"ENUMERACION DE SMB","text":""},{"location":"smtp-enum/","title":"ENUMERACION DE SMTP","text":""},{"location":"snmp-enum/","title":"ENUMERACION DE SNMP","text":""},{"location":"sock-puppets/","title":"SOCK PUPPETS","text":""},{"location":"stored-xss/","title":"XSS ALMACENADO","text":"<p>Este tipo de XSS es el m\u00e1s cr\u00edtico. Explotar esta vulnerabilidad permite que cualquier usuario que visite la p\u00e1gina ejecute el payload autom\u00e1ticamente.</p> <p></p> <p>En el siguiente ejemplo, podemos ver que es una aplicaci\u00f3n simple que muestra en la p\u00e1gina el texto que le pasamos. Como podemos ver en el c\u00f3digo HTML agrega un <code>&lt;ul&gt; ITEM_TEXT &lt;/ul&gt;</code> a una lista. Y si reiniciamos la p\u00e1gina, esos items que agregamos a la lista a\u00fan siguen en el c\u00f3digo HTML y se muestran en el navegador, indicando que de alguna manera se sobrescribe el c\u00f3digo HTML desde el lado del servidor.</p> <p></p> <p>Cross-domain IFrames</p> <p>Muchos navegadores web modernos usan cross-domain IFrames que gestionan el user input, asi que a\u00fan si un formulario web es vulnerable a XSS, no ser\u00e1 una vulnerabilidad en la aplicaci\u00f3n web principal. Podemos pasar el payload <code>&lt;script&gt;alert(window.origin)&lt;/script&gt;</code> para revelar la URL d\u00f3nde esta siendo ejecutado, y confirmar\u00e1 que formulario es el vulnerable, en caso de que se este usando IFrame.</p> <p>Navegadores modernos y funci\u00f3n alert()</p> <p>Muchos navegadores web modernos bloquearan la funci\u00f3n <code>alert()</code> para ubicaciones especificas, podemos intentar otros payloads b\u00e1sicos para verificar la existencia de XSS como <code>&lt;script&gt;print()&lt;/script&gt;</code>.</p> <p>Si intentamos inyectar un payload como <code>&lt;script&gt;prompt(\"Eris\")&lt;/script&gt;</code> podemos ver que se ejecuta la funci\u00f3n <code>prompt</code> correctamente, indicando mala sanitizaci\u00f3n del input y vulnerable a alg\u00fan tipo XSS.</p> <p></p> <p>Y podemos identificar que el tipo de vulnerabilidad es XSS Almacenado si reiniciamos la p\u00e1gina y se ejecuta autom\u00e1ticamente nuestra funci\u00f3n <code>prompt</code>.</p> <p></p>"},{"location":"subdomain-fuzzing/","title":"FUZZING DE SUBDOMINIOS","text":"<p>Wordlist adecuada para fuzzing de extensiones de archivos</p> <p>La wordlist de seclists llamada subdomains-top1million-20000.txt es una de las mejores para empezar este tipo de fuzzing.</p> <p>El fuzzing de subdominios busca descubrir nombres de subdominios asociados a un dominio principal. Esto se hace probando combinaciones de palabras (como <code>admin</code>, <code>dev</code>, <code>test</code>, <code>blog</code>, etc.) y verificando si existen entradas DNS v\u00e1lidas o si resuelven una direcci\u00f3n IP.</p>"},{"location":"subdomain-fuzzing/#fuzzing-de-subdominios-con-ffuf","title":"Fuzzing de subdominios con Ffuf","text":"<p>Para realizar fuzzing de subdominios con ffuf utilizamos el siguiente comando:</p> <pre><code>ffuf -u http://FUZZ.TARGET_IP:PORT/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt:FUZZ\n</code></pre>"},{"location":"subdomain-fuzzing/#fuzzing-de-vhosts-con-gobuster","title":"Fuzzing de vhosts con Gobuster","text":""},{"location":"vhost-fuzzing/","title":"FUZZING DE VHOSTS","text":"<p>Wordlist adecuada para fuzzing de extensiones de archivos</p> <p>La wordlist de seclists llamada subdomains-top1million-20000.txt es una de las mejores para empezar este tipo de fuzzing.</p> <p>El fuzzing de vhosts se centra en detectar configuraciones de servidores web que utilizan virtual hosting. En este caso, un mismo servidor puede alojar m\u00faltiples sitios web, diferenciados por el valor del encabezado <code>Host</code> en las peticiones HTTP.</p>"},{"location":"vhost-fuzzing/#fuzzing-de-vhosts-con-ffuf","title":"Fuzzing de vhosts con Ffuf","text":"<p>A diferencia del fuzzing de subdominios, en el fuzzing de vhosts el fuzzing se va a realizar en el header <code>Host</code> en lugar de la URL. Para ello primero tenemos que pasar dicho header con ffuf.</p> <ul> <li><code>Host: http://FUZZ.TARGET_IP:PORT</code></li> </ul> <pre><code>ffuf -u 'http://TARGET_IP:PORT' -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt:FUZZ -H 'Host: FUZZ.TARGET_IP'\n</code></pre>"},{"location":"vhost-fuzzing/#fuzzing-de-vhosts-con-gobuster","title":"Fuzzing de vhosts con Gobuster","text":""},{"location":"web-proxies/","title":"INTRODUCCION A LOS WEB PROXIES","text":"<p>Un web proxy act\u00faa como un intermediario entre el cliente (navegador web o aplicaci\u00f3n) y el servidor de destino. En lugar de conectar directamente, la petici\u00f3n se redirige al proxy, que luego la reenv\u00eda al servidor. En hacking la habilidad de interceptar y modificar peticiones y respuestas es fundamental.</p> <p></p> <p>Los dos web proxies m\u00e1s comunes son Burp Suite y Zed Attack Proxy (ZAP).</p>"},{"location":"web-proxies/#navegador-web-preconfigurado-en-burp-suite","title":"Navegador web preconfigurado en Burp Suite","text":"<p>Tanto Burp Suite como ZAP vienen con un navegador preconfigurado con la configuraci\u00f3n correspondiente del proxy y de los certificados CA.</p> <p>Para acceder al navegador configurado de Burp Suite vamos a ir a la pesta\u00f1a Proxy &gt; Intercept y en la esquina superior derecha se encuentra un bot\u00f3n que dice Open browser.</p> <p></p> <p>Esto abrir\u00e1 su navegador predeterminado que suele ser un chromium.</p>"},{"location":"web-proxies/#navegador-web-preconfigurado-en-zap","title":"Navegador web preconfigurado en ZAP","text":"<p>Para abrir el navegador web preconfigurado en ZAP buscaremos el icono de firefox, usualmente es el \u00faltimo o pen\u00faltimo de los iconos.</p> <p></p> <p>Esto abrira su navegador preconfigurado y nos aparecer\u00e1 un mensaje de bienvenida como el siguiente:</p> <p></p>"},{"location":"web-proxies/#uso-del-plugin-foxy-proxy-burp-suite-y-zap","title":"Uso del plugin Foxy Proxy (Burp Suite y ZAP)","text":"<p>Configuraci\u00f3n manual</p> <p>Si bien es posible configurar manualmente cualquier navegador web para que se use como proxy, es m\u00e1s conveniente usar plugins ya programados para hacer este proceso m\u00e1s f\u00e1cil. </p> <p>Puerto por defecto</p> <p>Tanto Burp Suite como ZAP utilizan el puerto 8080 por defecto, pero en ambos programas se puede configurar para usar otro puerto.</p> <p>Buscamos el plugin FoxyProxy para el navegador que estemos usando y la instalamos.</p> <p></p> <p>Vamos a configurar ahora el proxy llendo a Options y se nos abrir\u00e1 una nueva ventana con varias opciones para FoxyProxy.</p> <p></p> <p>Iremos a la pesta\u00f1a Proxies y le daremos al bot\u00f3n Add. Configuramos el proxy como lo necesitemos y le damos a Save.</p> <p></p> <p>Ahora podemos habilitar y deshabilitar r\u00e1pidamente si el navegador web usa el proxy o no desde el plugin.</p> <p></p> <p>Algunas conexiones HTTPS pueden fallar si no tenemos instalado los certificados CA del web proxy correspondiente. </p> <p></p>"},{"location":"web-proxies/#descargar-certificados-ca-de-burp-suite","title":"Descargar certificados CA de Burp Suite","text":"<p>Para descargar el certificado CA de Burp Suite vamos a ir al enlace <code>http://burp</code> y en la parte superior derecha se encuentra un bot\u00f3n CA Certificate al cliquear en el se descargar\u00e1 el certificado.</p> <p></p>"},{"location":"web-proxies/#instalar-los-certificados-ca-en-firefox","title":"Instalar los certificados CA en Firefox","text":"<p>Para instalar estos certificados en Firefox vamos a ir a la url <code>about:preferences#privacy</code> y en la parte de Security buscaremos el apartado de Certificates. </p> <p></p> <p>Daremos click a View Certificates... y en la ventana que se nos abra iremos a la pesta\u00f1a Authorities.</p> <p></p> <p>Clickearemos el bot\u00f3n Import... y seleccionamos el certificado CA del web proxy. Esto nos pedir\u00e1 que si deseamos confiar en el CA, seleccionamos ambas casillas y damos OK.</p> <p></p>"},{"location":"web-scanning/","title":"ESCANEO WEB CON ZAP","text":""},{"location":"xss/","title":"INTRODUCCION AL CROSS-SITE SCRIPTING (XSS)","text":"<p>El Cross-Site Scripting (XSS) es una vulnerabilidad de seguridad que afecta a aplicaciones web, permitiendo a atacantes inyectar y ejecutar c\u00f3digo malicioso en el navegador de la v\u00edctima utilizando inputs no sanitizados. Esto se traduce en una v\u00eda para robar cookies, redirigir a usuarios, manipular contenido, y en general, comprometer la integridad y privacidad de la sesi\u00f3n.</p> <p>Existen tres tipos principales de vulnerabilidades XSS:</p> <ul> <li> <p>XSS Almacenado (Persistente): Es el tipo m\u00e1s cr\u00edtico de XSS. El payload se almacena en el servidor y cada vez que un usuario accede a la informaci\u00f3n almacenada, el script se ejecuta en su navegador.</p> </li> <li> <p>XSS Reflejado (No-persistente): Este tipo se da cuando el payload se env\u00eda en la solicitud HTTP (por ejemplo, en un par\u00e1metro GET o POST) y es reflejado en la respuesta del servidor. No se almacena, sino que se ejecuta en el momento en que la v\u00edctima accede a un enlace manipulado.</p> </li> <li> <p>XSS DOM (No persistente): El ataque se ejecuta enteramente en el lado del cliente. La vulnerabilidad radica en c\u00f3mo el JavaScript del sitio manipula el Document Object Model (DOM). El atacante inyecta un payload que modifica el DOM de forma inesperada, sin que el servidor intervenga directamente.</p> </li> </ul>"},{"location":"zap/","title":"ZED ATTACK PROXIE (ZAP)","text":""}]}